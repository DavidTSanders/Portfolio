{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Portfolio For more information visit My Bio . Projects BikeCycle - A Google Sheets based project highlighting use of spreadsheet formulas. Specifically VLOOKUP() and how to overcome some of it's limitations. PittSubGraph - A Geographic Information System (GIS) based examination of Pittsburgh PA. AutoGis Python Package - A python package of functions used in the University of Helsinki's AutoGis course. Google Data Analytics - A summary of my progress studying for the Google Data Analytics Professional Certificate Skills I have a proven track record of being able to learn and use technology. Spreadsheets VLOOKUP() HLOOKUP() INDEX() / MATCH() IMPORTRANGE() QUERY() The BikeCycle project is a showcase of these spreadsheet skills. Data Visualization Tableau Excel Google ??? Matplotlib Folium Python Pandas Numpy Matplotlib Geopandas Folium JavaScript BreakOut Balls Fetch / API Server Side Client Side","title":"Portfolio"},{"location":"#portfolio","text":"For more information visit My Bio .","title":"Portfolio"},{"location":"#projects","text":"BikeCycle - A Google Sheets based project highlighting use of spreadsheet formulas. Specifically VLOOKUP() and how to overcome some of it's limitations. PittSubGraph - A Geographic Information System (GIS) based examination of Pittsburgh PA. AutoGis Python Package - A python package of functions used in the University of Helsinki's AutoGis course. Google Data Analytics - A summary of my progress studying for the Google Data Analytics Professional Certificate","title":"Projects"},{"location":"#skills","text":"I have a proven track record of being able to learn and use technology.","title":"Skills"},{"location":"#spreadsheets","text":"VLOOKUP() HLOOKUP() INDEX() / MATCH() IMPORTRANGE() QUERY() The BikeCycle project is a showcase of these spreadsheet skills.","title":"Spreadsheets"},{"location":"#data-visualization","text":"Tableau Excel Google ??? Matplotlib Folium","title":"Data Visualization"},{"location":"#python","text":"Pandas Numpy Matplotlib Geopandas Folium","title":"Python"},{"location":"#javascript","text":"BreakOut Balls Fetch / API Server Side Client Side","title":"JavaScript"},{"location":"autogis/","text":"Coming soon","title":"AutoGIS"},{"location":"bikecycle/","text":"Purpose BikeCycle is a Google Sheets based bicycle tracking system for FreeRide, a Do-It-Yourself bicycle cooperative located in Pittsburgh PA. BikeCycle's purpose is to track the lifecycle of a bicycle through FreeRide from the time a bicycle is first donated, to when it leaves the shop. FreeRide FreeRide accepts donated bicycles in any condition. Volunteers evaluate the bikes, fix them, donate them, or take them apart for recycling. Once a bike is fixed, it's donated or sold to the public at a drastically reduced price. Current Spreadsheets FreeRide currently uses two speadsheets to record bicycle information, an Incoming spreadsheet and an Outgoing spreadsheet. Incoming spreadsheet: When a bike is donated to the shop a unique number, known as the bikeID , is pasted to the frame. The bikeID and other basic information are entered into a form which automatically populates a spreadsheet named Incoming. An abbreviated example of the Incoming spreadsheet is below: Incoming Timestamp Make Model Wheel Size Bike ID 7/29/2022 10:12:14 Kent Ambush 20\" A0001 7/29/2022 10:12:54 Huffy Stone Mountain 20\" A0002 7/29/2022 10:13:32 Next Screamer II 20\" A0003 Outgoing spreadsheet: When a bicycle leaves the shop through a donation, sales, or recycling, the bikeID and destination are recorded using a form that populates a spreadsheet named Outgoing. Outgoing Bike ID Outgoing Destination A0069 Volunteer A0301 Sold A0302 Communicycle Proposed Spreadsheet BikeCycle spreadsheet: The goal is to take the two existing spreadsheets, Incoming and Outgoing, and combine them into a third spreadsheet named BikeCycle . The BikeCycle spreadsheet links the Incoming spreadsheet to the Outgoing spreadsheet using the bikeID. When a bike is leaving the shop, the bikeID is entered into the Outgoing form. Instead of reentering all of the bike's information, it will be pulled automatically from the Incoming sheet. This will allow the user to see all the data for that bike in one place without having to do any extra work. BikeCycle Bike Id Outgoing Destination Incoming Timestamp Make Model Wheel Size A0069 Volunteer 7/29/2022 10:12:14 Kent Ambush 20\" A0069 Volunteer 7/29/2022 10:12:54 Huffy Stone Mountain 20\" A0069 Volunteer 7/29/2022 10:13:32 Next Screamer II 20\" The Challenges There were a few challenges to overcome to complete this project. The two original sheets, Incoming and Outgoing, are in seperate files. The lookup column in the Incoming spreadsheet, BikeId, is not the first column in the sheet. This presents challenges for the common spreadsheet formula VLOOKUP() which requires the lookup field be to the left of any fields returned by the search . Note: There are other spreadsheet options that can be used, but this is a showcase of my VLOOKUP() skills. Other options include: INDEX() / MATCH() QUERY() XLOOKUP() Add-ons such as Consolidate Sheets or Merge Sheets The Solution The solution to this challenge, using VLOOKUP(), is to use a combination of IMPORTRANGE() and VLOOKUP() in a new spreadsheet. IMPORTRANGE() is used to import the Outgoing data (Date, BikeId, Destination) to the BikeCycle spreadsheet. VLOOKUP() uses the bikeID to search the Incoming spreadsheet for the corresponding bicycle attributes. Let's take a look at how we got around the VLOOKUP() limitation that requires the lookup field to be in the left most column. If you remember, the bikeId on the Incoming spreadsheet occurs well into the spreadsheet column list and definitely not to the left of the information we want VLOOKUP() to return. Incoming Timestamp Make Model Wheel Size Bike ID 7/29/2022 10:12:14 Kent Ambush 20\" A0001 Solution formula To avoid the limitations of VLOOKUP() we use the following formula to trick it into thinking the bikeId is in left most column. In place of a standard spreadsheet range A1:J , we use an array to rearrange the column order {Incoming!H2,Incoming!A2:J} . Note: In the actual Incoming spreadsheet, the bikeID is in column H. Here's the formula in it's entirety: ArrayFormula(IFERROR(VLOOKUP(A2,{Incoming!H2,Incoming!A2:J},{2,3,4,5,6,7,9},False),\"\")) Deconstruction Don't panic! We're going to deconstruct this formula into it's individual parts and explain what each part is doing. If you're not familiar with VLOOKUP() you can learn more here . IMPORTRANGE() Though we don't use IMPORTRANGE() directly in our formula, it does serve as part of our solution. We use IMPORTRANGE() to Import live copies of the Incoming and Outgoing spreadsheets into our Bikecycle spreadsheet. We put each into it's own tab. When either the Incoming or Outgoing spreadsheet is updated, it's live copy in our BikeCycle tab will be updated. Importing these spreadsheets into tabs inside BikeCycle will make them local, and allow our fomula to access them using the ! notation (more on this later). It is possible to put IMPORTRANGE() directly into our formula, but that would make the formula very long and harder to read. You can learn more about IMPORTRANGE here . The formula ArrayFormula(IFERROR(VLOOKUP(A2,{Incoming!H2,Incoming!A2:J},{2,3,4,5,6,7,9},False),\"\")) We use a combination of three predefined spreadsheet formulas ArrayFormula(), IFERROR(), and VLOOKUP() together to get the desired results. ArrayFormula() ArrayFormula() is used to allow VLOOKUP() to return a result greater than one cell. In this case we are returning all the columns that have bike information. You can learn more about ARRAYFORMULA() here . IFERROR() IFERROR() replaces any error messages with a blank space. If there is a column with no data, an error message like N/A may be put into the cell. IFERROR() replaces that error message with a message of your choice. In this case we put an empty string \"\". You can learn more about IFERROR() here . VLOOKUP() VLOOKUP() will take a lookup value from one cell in a spreadsheet and search the spreadsheet for the row containing that value. Once the row with the lookup value has been found, VLOOKUP() will return related data in a cell or cells in columns on that same row. First let's highlight the VLOOKUP() part of the solution formula. ArrayFormula(IFERROR( VLOOKUP(A2,{Incoming!H2,Incoming!A2:J},{2,3,4,5,6,7,9},False) ,\"\")) Next we'll look at the VLOOKUP() syntax and compare it to the VLOOKUP() in our formula. The Microsoft documentation for Excel defines the syntax for VLOOKUP() as: VLOOKUP(lookup_value,table_array,col_index_num,[range_lookup]) In the syntax above, the lookup_value is the search term we are trying to find. The table_array is where we expect to find this term and it's related values. The col_index_num is the column or columns we want to return. The [range_lookup] is optional and specifies whether the lookup value should be an exact match (FALSE or 0) or approximate match (TRUE or 1 [ to work properly the columm must be sorted in ascending order]). The table below gives a description of this syntax and shows the values we entered for each part. VLOOKUP() lookup_value table_array col_index_num [range_lookup] Description search value range to search which columns to return FALSE = approx match, TRUE = exact match Our version A2 {Incoming!H2,Incoming!A2:J} {2,3,4,5,6,7,9} False So how does this particular call to VLOOKUP() get around the limitaion that requires the lookup field to be in the left most column? Answer: It uses an array. Let's examine at the values in the table _array , which is the range we give VLOOKUP() to use in it's search. VLOOKUP(A2, {Incoming!H2,Incoming!A2:J} ,{2,3,4,5,6,7,9},False) ,\"\"))``` The table_array values are {Incoming!H2,Incoming!A2:J} . In a typical VLOOKUP() call, we would put a column and row range here. It would be something like A1:J to basically have VLOOKUP() search all the columns and rows in our sheet. Since the Incoming values are coming from a different spreadsheet tab within BikeCycle, we use the notation Incoming! to tell the formula to take this info from the Incoming tab. Searching the whole range Incoming!A1:J doesn't work for us because the BikeID, which is our lookup value, is not in the left most column. Instead we create our own defined range using an array , which starts and ends in curly braces {}. Our Array We use an array to mimic a speadsheet range. Inside our array, between the curly braces, we can put the columns in any order we like. The order we choose is bikeID first then the rest of the spreadsheet. Since the bikeID is in column H, we put that first, then a comma, then the rest of the spreadsheet. {Incoming!H:2,Incoming!A2:J} . And there you have it! The winning formula with the array highlighted: ArrayFormula(IFERROR( VLOOKUP(A2, {Incoming!H2,Incoming!A2:J} ,{2,3,4,5,6,7,9},False) ,\"\")) Now you know how to get past VLOOKUP()'s limitation. Use an array! Resources You can learn more about VLOOKUP() here You can learn more about ARRAYFORMULA() here You can learn more about IFERROR() here You can learn more about IMPORTRANGE here You can learn more about arrays here","title":"BikeCycle"},{"location":"bikecycle/#purpose","text":"BikeCycle is a Google Sheets based bicycle tracking system for FreeRide, a Do-It-Yourself bicycle cooperative located in Pittsburgh PA. BikeCycle's purpose is to track the lifecycle of a bicycle through FreeRide from the time a bicycle is first donated, to when it leaves the shop.","title":"Purpose"},{"location":"bikecycle/#freeride","text":"FreeRide accepts donated bicycles in any condition. Volunteers evaluate the bikes, fix them, donate them, or take them apart for recycling. Once a bike is fixed, it's donated or sold to the public at a drastically reduced price.","title":"FreeRide"},{"location":"bikecycle/#current-spreadsheets","text":"FreeRide currently uses two speadsheets to record bicycle information, an Incoming spreadsheet and an Outgoing spreadsheet.","title":"Current Spreadsheets"},{"location":"bikecycle/#incoming-spreadsheet","text":"When a bike is donated to the shop a unique number, known as the bikeID , is pasted to the frame. The bikeID and other basic information are entered into a form which automatically populates a spreadsheet named Incoming. An abbreviated example of the Incoming spreadsheet is below: Incoming Timestamp Make Model Wheel Size Bike ID 7/29/2022 10:12:14 Kent Ambush 20\" A0001 7/29/2022 10:12:54 Huffy Stone Mountain 20\" A0002 7/29/2022 10:13:32 Next Screamer II 20\" A0003","title":"Incoming spreadsheet:"},{"location":"bikecycle/#outgoing-spreadsheet","text":"When a bicycle leaves the shop through a donation, sales, or recycling, the bikeID and destination are recorded using a form that populates a spreadsheet named Outgoing. Outgoing Bike ID Outgoing Destination A0069 Volunteer A0301 Sold A0302 Communicycle","title":"Outgoing spreadsheet:"},{"location":"bikecycle/#proposed-spreadsheet","text":"","title":"Proposed Spreadsheet"},{"location":"bikecycle/#bikecycle-spreadsheet","text":"The goal is to take the two existing spreadsheets, Incoming and Outgoing, and combine them into a third spreadsheet named BikeCycle . The BikeCycle spreadsheet links the Incoming spreadsheet to the Outgoing spreadsheet using the bikeID. When a bike is leaving the shop, the bikeID is entered into the Outgoing form. Instead of reentering all of the bike's information, it will be pulled automatically from the Incoming sheet. This will allow the user to see all the data for that bike in one place without having to do any extra work. BikeCycle Bike Id Outgoing Destination Incoming Timestamp Make Model Wheel Size A0069 Volunteer 7/29/2022 10:12:14 Kent Ambush 20\" A0069 Volunteer 7/29/2022 10:12:54 Huffy Stone Mountain 20\" A0069 Volunteer 7/29/2022 10:13:32 Next Screamer II 20\"","title":"BikeCycle spreadsheet:"},{"location":"bikecycle/#the-challenges","text":"There were a few challenges to overcome to complete this project. The two original sheets, Incoming and Outgoing, are in seperate files. The lookup column in the Incoming spreadsheet, BikeId, is not the first column in the sheet. This presents challenges for the common spreadsheet formula VLOOKUP() which requires the lookup field be to the left of any fields returned by the search . Note: There are other spreadsheet options that can be used, but this is a showcase of my VLOOKUP() skills. Other options include: INDEX() / MATCH() QUERY() XLOOKUP() Add-ons such as Consolidate Sheets or Merge Sheets","title":"The Challenges"},{"location":"bikecycle/#the-solution","text":"The solution to this challenge, using VLOOKUP(), is to use a combination of IMPORTRANGE() and VLOOKUP() in a new spreadsheet. IMPORTRANGE() is used to import the Outgoing data (Date, BikeId, Destination) to the BikeCycle spreadsheet. VLOOKUP() uses the bikeID to search the Incoming spreadsheet for the corresponding bicycle attributes. Let's take a look at how we got around the VLOOKUP() limitation that requires the lookup field to be in the left most column. If you remember, the bikeId on the Incoming spreadsheet occurs well into the spreadsheet column list and definitely not to the left of the information we want VLOOKUP() to return. Incoming Timestamp Make Model Wheel Size Bike ID 7/29/2022 10:12:14 Kent Ambush 20\" A0001","title":"The Solution"},{"location":"bikecycle/#solution-formula","text":"To avoid the limitations of VLOOKUP() we use the following formula to trick it into thinking the bikeId is in left most column. In place of a standard spreadsheet range A1:J , we use an array to rearrange the column order {Incoming!H2,Incoming!A2:J} . Note: In the actual Incoming spreadsheet, the bikeID is in column H. Here's the formula in it's entirety: ArrayFormula(IFERROR(VLOOKUP(A2,{Incoming!H2,Incoming!A2:J},{2,3,4,5,6,7,9},False),\"\"))","title":"Solution formula"},{"location":"bikecycle/#deconstruction","text":"","title":"Deconstruction"},{"location":"bikecycle/#dont-panic","text":"We're going to deconstruct this formula into it's individual parts and explain what each part is doing. If you're not familiar with VLOOKUP() you can learn more here .","title":"Don't panic!"},{"location":"bikecycle/#importrange","text":"Though we don't use IMPORTRANGE() directly in our formula, it does serve as part of our solution. We use IMPORTRANGE() to Import live copies of the Incoming and Outgoing spreadsheets into our Bikecycle spreadsheet. We put each into it's own tab. When either the Incoming or Outgoing spreadsheet is updated, it's live copy in our BikeCycle tab will be updated. Importing these spreadsheets into tabs inside BikeCycle will make them local, and allow our fomula to access them using the ! notation (more on this later). It is possible to put IMPORTRANGE() directly into our formula, but that would make the formula very long and harder to read. You can learn more about IMPORTRANGE here .","title":"IMPORTRANGE()"},{"location":"bikecycle/#the-formula","text":"ArrayFormula(IFERROR(VLOOKUP(A2,{Incoming!H2,Incoming!A2:J},{2,3,4,5,6,7,9},False),\"\")) We use a combination of three predefined spreadsheet formulas ArrayFormula(), IFERROR(), and VLOOKUP() together to get the desired results.","title":"The formula"},{"location":"bikecycle/#arrayformula","text":"ArrayFormula() is used to allow VLOOKUP() to return a result greater than one cell. In this case we are returning all the columns that have bike information. You can learn more about ARRAYFORMULA() here .","title":"ArrayFormula()"},{"location":"bikecycle/#iferror","text":"IFERROR() replaces any error messages with a blank space. If there is a column with no data, an error message like N/A may be put into the cell. IFERROR() replaces that error message with a message of your choice. In this case we put an empty string \"\". You can learn more about IFERROR() here .","title":"IFERROR()"},{"location":"bikecycle/#vlookup","text":"VLOOKUP() will take a lookup value from one cell in a spreadsheet and search the spreadsheet for the row containing that value. Once the row with the lookup value has been found, VLOOKUP() will return related data in a cell or cells in columns on that same row. First let's highlight the VLOOKUP() part of the solution formula. ArrayFormula(IFERROR( VLOOKUP(A2,{Incoming!H2,Incoming!A2:J},{2,3,4,5,6,7,9},False) ,\"\")) Next we'll look at the VLOOKUP() syntax and compare it to the VLOOKUP() in our formula. The Microsoft documentation for Excel defines the syntax for VLOOKUP() as: VLOOKUP(lookup_value,table_array,col_index_num,[range_lookup]) In the syntax above, the lookup_value is the search term we are trying to find. The table_array is where we expect to find this term and it's related values. The col_index_num is the column or columns we want to return. The [range_lookup] is optional and specifies whether the lookup value should be an exact match (FALSE or 0) or approximate match (TRUE or 1 [ to work properly the columm must be sorted in ascending order]). The table below gives a description of this syntax and shows the values we entered for each part. VLOOKUP() lookup_value table_array col_index_num [range_lookup] Description search value range to search which columns to return FALSE = approx match, TRUE = exact match Our version A2 {Incoming!H2,Incoming!A2:J} {2,3,4,5,6,7,9} False So how does this particular call to VLOOKUP() get around the limitaion that requires the lookup field to be in the left most column? Answer: It uses an array. Let's examine at the values in the table _array , which is the range we give VLOOKUP() to use in it's search. VLOOKUP(A2, {Incoming!H2,Incoming!A2:J} ,{2,3,4,5,6,7,9},False) ,\"\"))``` The table_array values are {Incoming!H2,Incoming!A2:J} . In a typical VLOOKUP() call, we would put a column and row range here. It would be something like A1:J to basically have VLOOKUP() search all the columns and rows in our sheet. Since the Incoming values are coming from a different spreadsheet tab within BikeCycle, we use the notation Incoming! to tell the formula to take this info from the Incoming tab. Searching the whole range Incoming!A1:J doesn't work for us because the BikeID, which is our lookup value, is not in the left most column. Instead we create our own defined range using an array , which starts and ends in curly braces {}.","title":"VLOOKUP()"},{"location":"bikecycle/#our-array","text":"We use an array to mimic a speadsheet range. Inside our array, between the curly braces, we can put the columns in any order we like. The order we choose is bikeID first then the rest of the spreadsheet. Since the bikeID is in column H, we put that first, then a comma, then the rest of the spreadsheet. {Incoming!H:2,Incoming!A2:J} .","title":"Our Array"},{"location":"bikecycle/#and-there-you-have-it","text":"The winning formula with the array highlighted: ArrayFormula(IFERROR( VLOOKUP(A2, {Incoming!H2,Incoming!A2:J} ,{2,3,4,5,6,7,9},False) ,\"\")) Now you know how to get past VLOOKUP()'s limitation. Use an array!","title":"And there you have it!"},{"location":"bikecycle/#resources","text":"You can learn more about VLOOKUP() here You can learn more about ARRAYFORMULA() here You can learn more about IFERROR() here You can learn more about IMPORTRANGE here You can learn more about arrays here","title":"Resources"},{"location":"bio/","text":"David Sanders is a life-long learner who is looking forward to starting this new phase of his life as a Data Analyst. He has a B.A. in Media Arts and is currently a self-guided student, preparing for the Google Data Analytics Professional Certificate, and completing his second online course in Graphical Information Science (GIS) with the University of Helsinki\u2019s Department of Geosciences. David\u2019s most recent job was working with the Pittsburgh Compost Company where he was responsible for collecting, weighing and reporting on compost from large commercial kitchens such as the University of Pittsburgh, UPMC, PNC, and Facebook. Unfortunately the Pittsburgh Composting Company stopped doing business as of August 31st 2022. Over the course of his career, David Sanders has worked as a Computer Programmer, Teacher, Legal Videographer, Performer and Laborer. His work philosophy is to be curious and look for deeper meaning behind a request or task. He believes knowing why a project is important to a company, department and/or client, and how it fits into the bigger picture, leads to a better understanding of the details involved and a more comprehensive solution. His professional achievements include: Helping one of Merrill Lynch\u2019s global intranet web sites transition from being dependent on outside vendors, to successful in-house development of internal applications. He also helped to plan and implement QA and Staging environments. Videotaping hundreds of legal depositions in high profile cases for some of the largest court reporting and litigation firms in the United States. Writing successful grants totalling more that $100,000 for the Jersey City Free Public Library In his free time, David enjoys bicycle riding, volunteering, juggling and playing scrabble.","title":"Bio"},{"location":"gda/","text":"","title":"Google Data Analytics"},{"location":"pittsubgraph/","text":"MY BACK POCKET IS FULL TODAY We are all just puppets controlled by the corporate government. Haarps sing, decelerating our molecules. Cursed, our tears slowly freezing, we resist becoming the bankosaurus on spiritual skid row. GENTRIFICATION What blight thru yonder window breaks? What I, who killed your habitat and community, to woo you? All the world to Facebook!? ONE OR TWO Evacuation routes in Pittsburgh may be through the basement.","title":"PittSubGraph"},{"location":"pittsubgraph/#my-back-pocket-is-full-today","text":"We are all just puppets controlled by the corporate government. Haarps sing, decelerating our molecules. Cursed, our tears slowly freezing, we resist becoming the bankosaurus on spiritual skid row.","title":"MY BACK POCKET IS FULL TODAY"},{"location":"pittsubgraph/#gentrification","text":"What blight thru yonder window breaks? What I, who killed your habitat and community, to woo you? All the world to Facebook!?","title":"GENTRIFICATION"},{"location":"pittsubgraph/#one-or-two","text":"Evacuation routes in Pittsburgh may be through the basement.","title":"ONE OR TWO"},{"location":"archive/file_structure_index/","text":"Portfolio For more information visit My Bio . Projects BikeCycle - A Google Sheets based project. PittSubGraph - A GIS based examination of Pitsburgh. AutoGis Python Package - A python package of functions used in the University of Helsinki's AutoGis course. Google Data Analytics - A summary of my progress studying for the Google Data Analytics Professional Certificate Skills Where to start? I've been doing this for a long time. Below is an attempt to list and group some of my skills: The BikeCycle project is a showcase of these spreadsheet skills. Python Pandas Numpy Matplotlib Geopandas Folium","title":"Portfolio"},{"location":"archive/file_structure_index/#portfolio","text":"For more information visit My Bio .","title":"Portfolio"},{"location":"archive/file_structure_index/#projects","text":"BikeCycle - A Google Sheets based project. PittSubGraph - A GIS based examination of Pitsburgh. AutoGis Python Package - A python package of functions used in the University of Helsinki's AutoGis course. Google Data Analytics - A summary of my progress studying for the Google Data Analytics Professional Certificate","title":"Projects"},{"location":"archive/file_structure_index/#skills","text":"Where to start? I've been doing this for a long time. Below is an attempt to list and group some of my skills: The BikeCycle project is a showcase of these spreadsheet skills.","title":"Skills"},{"location":"archive/file_structure_index/#python","text":"Pandas Numpy Matplotlib Geopandas Folium","title":"Python"}]}